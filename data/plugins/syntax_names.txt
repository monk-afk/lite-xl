 arg
 assert
 dofile
 load
 loadfile
 ipairs
 pairs
 tonumber
 tostring
 type
 print
 string
 select
 next

  coroutine_lib
 coroutine%.%l+
     close
     create
     isyieldable
     resume
     running
     status
     wrap
     yield

  io_lib
 io%.%l+
   close
   flush
   input
   lines
   open
   output
   popen
   read
   stderr
   stdin
   stdout
   tmpfile
   type
   write

  math_lib
 math%.%l+
     abs
     acos
     asin
     atan
     atan2
     ceil
     cos
     cosh
     deg
     exp
     floor
     fmod
     frexp
     huge
     ldexp
     log
     log10
     max
     maxinteger
     min
     mininteger
     modf
     pi
     pow
     rad
     random
     randomseed
     sin
     sinh
     sqrt
     tan
     tanh
     tointeger
     type
     ult

  os_lib
 os%.%l+
     clock
     date
     difftime
     execute
     exit
     getenv
     remove
     rename
     setlocale
     time
     tmpname

  string_lib
 string%.%l+
     byte
     char
     dump
     find
     format
     gmatch
     gsub
     len
     lower
     match
     pack
     packsize
     rep
     reverse
     sub
     unpack
     upper

 table%.%l+
     concat
     insert
     move
     pack
     remove
     sort
     unpack

 utf8%.%l+
     char
     charpattern
     codepoint
     codes
     len

 ?
 offset
 loadlib
 path
 preload
 searchers
 collectgarbage
 searchpath
 pcall
 rawequal
 rawget
 rawlen
 rawset
 require
 setmetatable
 utf8
 warn
 xpcall
 debug
 gethook
 getinfo
 getlocal
 getmetatable
 getregistry
 getupvalue
 getuservalue
 setcstacklimit
 sethook
 setlocal
 setmetatable
 setupvalue
 setuservalue
 traceback
 upvalueid
 upvaluejoin

------==========================------------------

-
 Simple Pattern
   { pattern = "#.*\n",        type = "comment" },
   This form matches the line against the pattern and if it matches, assigns the matching text to the given token type - comment, in this case.

   Start & End Pattern
   { pattern = { "%[", "%]" }, type = "keyword" },
   This form has two patterns - one that matches against the start of the range and one that matches against the end. Everything between the start and the end will be assigned the given token type.

   Start & End Pattern, with Escape
   { pattern = { '"', '"', '\' }, type = "string" },
   This is the same as the previous form, but with an extra, third parameter. The 3rd part, the '\' part in this example, specifies the character that allows escaping the closing match.

   For more on Lua Patterns, see: Lua Pattern Reference

   If you need to use PCRE Regular Expressions, instead of Lua Patterns, you can use the regex keyword here, instead of pattern.
-



------==========================------------------

 https://www.lua.org/manual/5.3/manual.html#9

 	chunk ::= block

 	block ::= {stat} [retstat]

 	stat ::=  ‘;’ |
 		 varlist ‘=’ explist |
 		 functioncall |
 		 label |
 		 break |
 		 goto Name |
 		 do block end |
 		 while exp do block end |
 		 repeat block until exp |
 		 if exp then block {elseif exp then block} [else block] end |
 		 for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end |
 		 for namelist in explist do block end |
 		 function funcname funcbody |
 		 local function Name funcbody |
 		 local namelist [‘=’ explist]

 	retstat ::= return [explist] [‘;’]

 	label ::= ‘::’ Name ‘::’

 	funcname ::= Name {‘.’ Name} [‘:’ Name]

 	varlist ::= var {‘,’ var}

 	var ::=  Name | prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name

 	namelist ::= Name {‘,’ Name}

 	explist ::= exp {‘,’ exp}

 	exp ::=  nil | false | true | Numeral | LiteralString | ‘...’ | functiondef |
 		 prefixexp | tableconstructor | exp binop exp | unop exp

 	prefixexp ::= var | functioncall | ‘(’ exp ‘)’

 	functioncall ::=  prefixexp args | prefixexp ‘:’ Name args

 	args ::=  ‘(’ [explist] ‘)’ | tableconstructor | LiteralString

 	functiondef ::= function funcbody

 	funcbody ::= ‘(’ [parlist] ‘)’ block end

 	parlist ::= namelist [‘,’ ‘...’] | ‘...’

 	tableconstructor ::= ‘{’ [fieldlist] ‘}’

 	fieldlist ::= field {fieldsep field} [fieldsep]

 	field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

 	fieldsep ::= ‘,’ | ‘;’

 	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ |
 		 ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ |
 		 ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘~=’ |
 		 and | or

 	unop ::= ‘-’ | not | ‘#’ | ‘~’
